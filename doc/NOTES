Developer notes
================

The storage and the communication implementations are decoupled. To do so, the
query, reply and registration function have been abstracted and any
communication scheme must implement some specific functions. These functions
are used to register the communication scheme, determine the content of a
request, build a reply or register the content. Therefore, only the parsing of
the communication and the construction of the replies must be implemented. No
code has to be changed in the server implementation except the plumbing file
which attach the new communication scheme to the server.

The communication abstraction is the following:
struct communication_fct {
        /* communication management */
        void * (*start_communication)(void * context);
        void * (*stop_communication)(void * context);

        /* Map-Reply */
	/* create a new reply
	   @param nonce nonce of the reply
	   @return a identifier for the reply
	*/
        uint32_t (*reply_add)(uint64_t nonce);
	/* start a new record for the reply
	   @param id reply identifier
	   @param p record EID prefix
	   @param ttl see draft-ietf-lisp-07
	   @param lcount number of locators in the record
	   @param version see draft-ietf-lisp-07
	   @param A see draft-ietf-lisp-07
	   @param act see draft-ietf-lisp-07
	   @return TRUE on success, otherwise a FALSE is returned
	 */
        int (*reply_add_record)(uint32_t id, struct prefix * p, uint32_t ttl, uint8_t lcount, uint32_t version, uint8_t A, uint8_t act);
	/* add a locator to the current record
	   @param id reply identifier
	   @param e map-entry information (locator, priority...)
	   @return TRUE on success, otherwise a FALSE is returned
	 */
        int (*reply_add_locator)(uint32_t id, struct map_entry * e);
	/* something wrong happened */
        int (*reply_error)(uint32_t id);
	/* Indicates that the reply construction is finished, post-processing
	   can be started */
        int (*reply_terminate)(uint32_t id);

        /* Map-Request */
	/* Obtain the EID associated to the request. p is set to the EID found
	   in the request
	   @param id request identifier
	   @param p eid prefix in the request
	   @return TRUE on success, otherwise a FALSE is returned
	 */
        int (*request_get_eid)(uint32_t id, struct prefix * p);
	/* Obtain the nonce associated to the request. nonce is set to the
	   nonce found in the request
	   @param id request identifier
	   @param nonce nonce in the request
	   @return TRUE on success, otherwise a FALSE is returned
	 */
        int (*request_get_nonce)(uint32_t id, uint64_t * nonce);
	/* Indicates that the request has been processed completely */
        int (*request_terminate)(uint32_t id);
};

The server implements the function "int generic_process_request(uint32_t request_id, struct communication_fct * fct)".
This function is in charge of processing the request of identifier request_id
by using the communication abstraction functions referenced in fct. The
function generates the corresponding reply.

The three following function are also implemented by the server and are in
charge of registering Map-Register records.

- void * generic_mapping_new(struct prefix * eid):
  Create a new mapping for the EID prefix "eid" and return an identifier to the
  newly created mapping.

- int generic_mapping_set_flags(void * mapping, const struct mapping_flags * mflags): 
  Set the mapping flags to an EID prefix mapping.

- int generic_mapping_add_rloc(void * mapping, struct map_entry * entry): 
  Add a locator (and its attributes) to a mapping.


The plumbing.c file implements void plumb() called at the server startup (once
the database is loaded). The plumb function consists of starting the operation
to process requests/replies/registers. A typical way of implementing the plumb
function is to used pthreads. The following gives an example of the plumbing of
two communication implementations:

extern struct communication_fct cli_fct;
extern struct communication_fct udp_fct;
void
plumb(){
        /* ADD CLI front-end to the server */
	pthread_t cli_th;
	pthread_create(&cli_th, NULL, cli_fct.start_communication, NULL);

	/* ADD UDP draft-ietf-lisp-07 front-end to the server */
	pthread_t udp_th;
	pthread_create(&udp_th, NULL, udp_fct.start_communication, "IPV4");

	pthread_t udp_th6;
	pthread_create(&udp_th6, NULL, udp_fct.start_communication, "IPV6");
	
	//pthread_join(cli_th, NULL);
	pthread_join(udp_th, NULL);
	pthread_join(udp_th6, NULL);
}

Threading is an example, one could use select or any other technique
